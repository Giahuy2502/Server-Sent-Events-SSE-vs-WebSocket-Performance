// X·ª≠ l√Ω Server-Sent Events (SSE)

let sseConnected = false;
let sseSource = null;
let ssePerformanceSource = null;
let sseFallbackMode = false;
let sseFallbackInterval = null;
let sseReconnectAttempts = 0;
let ssePollingCount = 0; // Counter cho polling ƒë·ªÉ th·ª≠ reconnect
let sseMaxReconnectAttempts = 100;
let sseManuallyStarted = false; // Bi·∫øn ƒë·ªÉ tracking xem c√≥ ƒë∆∞·ª£c start th·ªß c√¥ng kh√¥ng

const sseStatus = document.getElementById('sseStatus');

// K·∫øt n·ªëi SSE
function connectSSE(isAutoReconnect = false) {
  if (sseConnected && !sseFallbackMode) {
    log('SSE ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi');
    return;
  }

  // N·∫øu kh√¥ng ph·∫£i auto-reconnect th√¨ ƒë√°nh d·∫•u l√† manually started
  if (!isAutoReconnect) {
    sseManuallyStarted = true;
  }

  // Ki·ªÉm tra xem EventSource c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng
  if (typeof EventSource === 'undefined') {
    log('L·ªói: Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ EventSource (SSE) - chuy·ªÉn sang fallback mode');
    startSSEFallback();
    return;
  }

  try {
    log('ƒêang k·∫øt n·ªëi SSE...');
    sseSource = new EventSource("https://websocket-c88q.onrender.com/stream");
    
    sseSource.onopen = () => {
      sseConnected = true;
      sseFallbackMode = false;
      sseReconnectAttempts = 0;
      ssePollingCount = 0; // Reset polling count
      
      // Clear fallback interval n·∫øu c√≥
      if (sseFallbackInterval) {
        clearInterval(sseFallbackInterval);
        sseFallbackInterval = null;
      }
      
      updateStatus(sseStatus, 'SSE: ƒê√£ k·∫øt n·ªëi ‚úÖ', true);
      updateConnectionUI('sse', true);
      log('SSE k·∫øt n·ªëi th√†nh c√¥ng');
    };

    sseSource.onmessage = event => {
      const data = JSON.parse(event.data);
      document.getElementById("sseValue").textContent = data.value;
      document.getElementById("sseTime").textContent = "C·∫≠p nh·∫≠t l√∫c " + data.timestamp;
      
      // T√≠nh ƒë·ªô tr·ªÖ cho SSE
      if (data.send_time) {
        sseLatency = Math.round((Date.now() / 1000 - data.send_time) * 1000);
        document.getElementById("sseLatency").textContent = sseLatency + " ms";
      }
    };

    sseSource.onerror = (error) => {
      log('SSE m·∫•t k·∫øt n·ªëi - chuy·ªÉn sang fallback mode...');
      
      // Ch·ªâ chuy·ªÉn sang fallback n·∫øu ƒë√£ ƒë∆∞·ª£c manually started
      if (sseManuallyStarted && !sseFallbackMode) {
        startSSEFallback();
      }
    };

    // K·∫øt n·ªëi lu·ªìng d·ªØ li·ªáu hi·ªáu su·∫•t
    connectSSEPerformance();

  } catch (error) {
    log('SSE k·∫øt n·ªëi th·∫•t b·∫°i: ' + error.message + ' - chuy·ªÉn sang fallback mode');
    startSSEFallback();
  }
}

function connectSSEPerformance() {
  try {
    ssePerformanceSource = new EventSource("https://websocket-c88q.onrender.com/performance");
    ssePerformanceSource.onmessage = event => {
      const data = JSON.parse(event.data);
      ssePerformanceData = data;
      
      document.getElementById("sseConnections").textContent = data.connections;
      document.getElementById("sseMessages").textContent = data.messages_sent;
      document.getElementById("sseThroughput").textContent = data.throughput;
      document.getElementById("sseUptime").textContent = data.uptime;
      
      updateComparison();
    };

    ssePerformanceSource.onerror = (error) => {
      log('L·ªói k·∫øt n·ªëi lu·ªìng hi·ªáu su·∫•t SSE - s·ª≠ d·ª•ng fallback performance');
      // startSSEPerformanceFallback(); // Comment out
    };
  } catch (error) {
    // startSSEPerformanceFallback(); // Comment out
  }
}

// SSE Fallback functions
function startSSEFallback() {
  // Ch·ªâ start fallback n·∫øu ƒë√£ ƒë∆∞·ª£c manually started tr∆∞·ªõc ƒë√≥
  if (!sseManuallyStarted) {
    log('SSE: Ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi th·ªß c√¥ng, kh√¥ng start fallback');
    return;
  }

  if (sseFallbackMode) {
    return; // ƒê√£ trong fallback mode
  }

  log('Kh·ªüi ƒë·ªông SSE fallback mode (HTTP polling)...');
  sseFallbackMode = true;
  sseConnected = false; // Set false v√¨ kh√¥ng ph·∫£i real connection
  
  updateStatus(sseStatus, 'SSE: Fallback mode üîÑ', true);
  updateConnectionUI('sse', true);
  
  // Polling data t·ª´ fallback endpoint
  sseFallbackInterval = setInterval(() => {
    fetch('https://websocket-c88q.onrender.com/fallback/polling')
      .then(response => response.json())
      .then(data => {
        if (data.messages && data.messages.length > 0) {
          const latestMessage = data.messages[data.messages.length - 1];
          document.getElementById("sseValue").textContent = latestMessage.value;
          document.getElementById("sseTime").textContent = "Fallback: " + latestMessage.timestamp;
          
          if (latestMessage.send_time) {
            sseLatency = Math.round((Date.now() / 1000 - latestMessage.send_time) * 1000) + 200;
            document.getElementById("sseLatency").textContent = sseLatency + " ms (fallback)";
          }
        }
        
        // Th·ª≠ k·∫øt n·ªëi l·∫°i EventSource m·ªói 10 gi√¢y
        ssePollingCount++;
        if (ssePollingCount % 5 === 0) { // 5 * 2s = 10s
          tryReconnectSSE();
        }
      })
      .catch(error => {
        log('SSE fallback polling l·ªói: ' + error.message);
      });
  }, 2000);
  
  // startSSEPerformanceFallback(); // Comment out v√¨ function kh√¥ng t·ªìn t·∫°i
}

function tryReconnectSSE() {
  if (!sseFallbackMode) return;
  
  log('SSE: Th·ª≠ k·∫øt n·ªëi l·∫°i EventSource...');
  
  // T·∫°o EventSource m·ªõi ƒë·ªÉ test
  try {
    const testSource = new EventSource("https://websocket-c88q.onrender.com/stream");
    
    const timeout = setTimeout(() => {
      testSource.close();
      log('SSE: Test connection timeout');
    }, 3000);
    
    testSource.onopen = () => {
      clearTimeout(timeout);
      testSource.close();
      
      log('SSE: Server ƒë√£ kh√¥i ph·ª•c, chuy·ªÉn v·ªÅ connection mode');
      
      // Cleanup fallback
      clearInterval(sseFallbackInterval);
      sseFallbackInterval = null;
      sseFallbackMode = false;
      ssePollingCount = 0;
      
      // T·∫°o connection th·∫≠t
      connectSSE(true);
    };
    
    testSource.onerror = () => {
      clearTimeout(timeout);
      testSource.close();
    };
    
  } catch (error) {
    log('SSE: L·ªói khi test reconnect: ' + error.message);
  }
}

// Ng·∫Øt k·∫øt n·ªëi SSE
function disconnectSSE() {
  if (!sseConnected && !sseFallbackMode) {
    log('SSE ƒë√£ ng·∫Øt k·∫øt n·ªëi');
    return;
  }

  try {
    // ƒê√≥ng EventSource n·∫øu c√≥
    if (sseSource) {
      sseSource.close();
      sseSource = null;
    }
    if (ssePerformanceSource) {
      ssePerformanceSource.close();
      ssePerformanceSource = null;
    }
    
    // ƒê√≥ng fallback polling n·∫øu c√≥
    if (sseFallbackInterval) {
      clearInterval(sseFallbackInterval);
      sseFallbackInterval = null;
    }
    
    sseConnected = false;
    sseFallbackMode = false;
    sseReconnectAttempts = 0;
    sseManuallyStarted = false; // Reset flag khi disconnect th·ªß c√¥ng
    updateStatus(sseStatus, 'SSE: ƒê√£ ng·∫Øt k·∫øt n·ªëi ‚è∏Ô∏è', false);
    updateConnectionUI('sse', false);
    
    // X√≥a hi·ªÉn th·ªã d·ªØ li·ªáu
    document.getElementById("sseValue").textContent = '--';
    document.getElementById("sseTime").textContent = 'ƒê√£ ng·∫Øt k·∫øt n·ªëi';
    
    log('SSE ƒë√£ ng·∫Øt k·∫øt n·ªëi th·ªß c√¥ng');
  } catch (error) {
    log('L·ªói khi ng·∫Øt k·∫øt n·ªëi SSE: ' + error.message);
  }
}
